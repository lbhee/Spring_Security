<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
[key point]
Mybatis 사용 프로젝트 진행시

1. mapper namespace 이름 : DAO 가지는 interface 이름을 그대로
2. <select id="" 이름을  interface 가지는 함수명과 동일
   result : interface 와 mapper 있으면 실행
	//게시물 개수
	public int getCount(String field, String query) throws ClassNotFoundException, SQLException;
	
	//전체 게시물
	public List<Notice> getNotices(int page, String field, String query) throws ClassNotFoundException, SQLException;
	
	//게시물 삭제
	public int delete(String seq) throws ClassNotFoundException, SQLException;
	
	//게시물 수정
	public int update(Notice notice) throws ClassNotFoundException, SQLException;
	
	//게시물 상세
	public Notice getNotice(String seq) throws ClassNotFoundException, SQLException;

	//게시물 입력
	public int insert(Notice n) throws ClassNotFoundException, SQLException;
-->

<mapper namespace="dao.NoticeDao">
 
 	<!-- 
 	<게시물 개수>
 	public int getCount(String field, String query)
 	1. 파라메터가 1개일 경우에는 보통은 생략 or parameterType="int" 이렇게 명시한다.
 	2. 파라메터가 DTO객체인경우 parameterType="vo.Notice"
 	3. 파라메터가 2개이상인데 DTO가 없는 경우 
 	   - HashMap사용한다.
 	     map.put(ket, value), map.put(ket, value), map.put(ket, value) >> parameterType="Map"
 	   - mabatis가 parameter값을 read하는 방법 : param1, param2, param3...
 	     ex) public int getCount(String field, String query) >> mapper >> param1, param2
 	         파라메터 1개는 param1으로 불가능하다!
 	           
 	 -->
	<select id="getCount" resultType="int">
      SELECT COUNT(*) CNT 
      FROM NOTICES 
      WHERE ${param1} LIKE '%${param2}%'
   </select>   
	
	<!-- 
	<전체 게시물>
	public List<Notice> getNotices(int page, String field, String query) 
	
	단순 파라메터를 받는게 아닌 이렇게 수식이 필요한 경우에는 오라클(DB)에게 넘긴다.
	int srow = 1 + (page-1)*5;
	int erow = 5 + (page-1)*5; 
	
	? : "%"+query+"%" -> LIKE '%${param3}%' 
	? : srow
	? : erow	
		
	-->
	<select id="getNotices" resultType="vo.Notice">
		SELECT * FROM
					(
					SELECT ROWNUM NUM, N.* 
					FROM 
						(
						SELECT * 
						FROM NOTICES 
						WHERE ${param2} LIKE '%${param3}%' ORDER BY REGDATE DESC
						) N
					) WHERE NUM BETWEEN 1 + (${param1}-1)*5 AND 5 + (${param1}-1)*5
	</select>

    <!--
    <게시물 상세> 
    public Notice getNotice(String seq)
     - parameterType은 생략가능
     - param1 적용안됨X
     -->
    <select id="getNotice"  resultType="vo.Notice">
    	SELECT seq,title,writer,content,regdate,hit,filesrc,filesrc2 
    	FROM NOTICES 
    	WHERE SEQ = #{seq}
    </select>

	<!-- 
	<게시물 삭제>
	public int delete(String seq)
	 -->
	 <delete id="delete">
	 	DELETE NOTICES WHERE SEQ=#{seq}
	 </delete>
	 
	 <!-- 
	 <게시물 수정>
	 public int update(Notice notice) 
	  - 파일수정 : null, null
	  - 1개만 수정 : 1.jpg, null
	  - 2개 수정 : 1.jpg, 2.jpg
	  값이 넘어오지 않는 경우 null처리하는 방법
	   : #{fileSrc, jdbcType=VARCHAR}  -> filesrc = null
	 -->
	 <update id="update" parameterType="vo.Notice">
	 	UPDATE NOTICES 
	 	SET TITLE=#{title}, 
	 	    CONTENT=#{content}, 
	 	    FILESRC=#{fileSrc, jdbcType=VARCHAR}, 
	 	    FILESRC2=#{fileSrc2, jdbcType=VARCHAR} 
	 	WHERE SEQ=#{seq}
	 </update>
	 
	 <!--
	 <게시물 입력>
	 public int insert(Notice n)
	 
	 <insert id="insert" parameterType="vo.Notice">
	 	INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
	 	VALUES( (SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES), #{title}, #{content}, 'bituser', SYSDATE, 0, #{fileSrc},${fileSrc2})
	 </insert>
	 -->
	 <insert id="insert" parameterType="vo.Notice" >
           <selectKey  order="BEFORE"   keyProperty="seq"   resultType="String">
                 SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES
           </selectKey>
              INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
              VALUES( #{seq}, #{title}, #{content}, #{writer}, SYSDATE, 0, #{fileSrc}, #{fileSrc2})
     </insert>
</mapper>